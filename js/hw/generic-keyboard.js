// Generated by CoffeeScript 1.3.1
(function() {
  var Device, GenericKeyboard, Module, device,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Module = {};

  device = require("./device");

  Device = device.Device;

  GenericKeyboard = (function(_super) {

    __extends(GenericKeyboard, _super);

    GenericKeyboard.name = 'GenericKeyboard';

    function GenericKeyboard(cpu) {
      GenericKeyboard.__super__.constructor.call(this, "Generic Keyboard", cpu);
      this.mKeyBuffer = [];
    }

    GenericKeyboard.prototype.id = function() {
      return 0x30cf7406;
    };

    GenericKeyboard.prototype.mfgr = function() {
      return 0x0;
    };

    GenericKeyboard.prototype.ver = function() {
      return 0x1;
    };

    GenericKeyboard.prototype.hwInterrupt = function() {
      switch (this.mCpu.regA()) {
        case 0:
          return this.clearBuffer();
        case 1:
          return this.nextKey();
        case 2:
          return this.isPressed();
        case 3:
          return this.setInterrupts();
        default:
          return;
      }
    };

    GenericKeyboard.prototype.clearBuffer = function() {
      return this.mKeyBuffer = [];
    };

    GenericKeyboard.prototype.nextKey = function() {
      var key;
      if (this.mKeyBuffer.length === 0) {
        return 0;
      }
      key = this.mKeyBuffer[0];
      this.mKeyBuffer = this.mKeyBuffer.slice(1);
      return this.mCpu.regC(key);
    };

    GenericKeyboard.prototype.isPressed = function() {
      return this.mCpu.regC(0);
    };

    GenericKeyboard.prototype.setInterrupts = function() {
      return this.mIrqMsg = this.mCpu.regB();
    };

    return GenericKeyboard;

  })(Device);

  exports.GenericKeyboard = GenericKeyboard;

}).call(this);
